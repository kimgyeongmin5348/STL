#include "Player.h"

int main()
{

	ifstream in { "2024 STL 과제 파일",ios::binary };

	if (not in) {
		return 0;
	}
	

	vector<Player> players;
	while (in.peek() != EOF) {
		Player player;
		player.read(in);
		players.push_back(player);
	}

	//----------------------------------------------------------------------
	// [문제 1]
	//----------------------------------------------------------------------

	cout << "[문제1] 마지막 Player 정보\n";
	players.rbegin()->show();
	cout << "\n";
	cout << "-----------------------------------------------------------------" << '\n';

	//----------------------------------------------------------------------
	// [문제 2]
	//----------------------------------------------------------------------

	auto max_score_player = max_element(players.cbegin(), players.cend(), [](const Player& a, const Player& b) {
		return a.getScore() < b.getScore();
		});
	cout << "[문제2] 가장 점수가 높은 Player 정보\n";
	max_score_player->show();
	cout << "\n";

	// Player의 평균 점수 계산
	long long average_score = accumulate(players.begin(), players.end(), 0LL, [](long long sum, const Player& player) {
		return sum + player.getScore();
		});
	cout << "평균 점수: " << static_cast<long long>(average_score/players.size()) << '\n';
	cout << "-----------------------------------------------------------------" << '\n';

	//----------------------------------------------------------------------
	// [문제 3]
	//----------------------------------------------------------------------

	sort(players.begin(), players.end(), [](const Player& a, const Player& b) {
		return a.getId() < b.getId();
		});
	ofstream out{ "같은아이디.txt" };
	int cnt{ 1 };
	for (int i = 0; i < players.size(); ++i) {
		if (players[i].getId() == players[i + 1].getId()) {
			out << cnt << "  " << players[i] << '\n';
			++cnt;
		}
		else if (players[i].getId() == players[i - 1].getId()) {
			out << cnt << "  " << players[i] << '\n';
			++cnt;
		}
	}

	cout << "[문제3] id가 같은 객체의 개수 : " << cnt << '\n';	
	cout << "-----------------------------------------------------------------" << '\n';

	//----------------------------------------------------------------------
	// [문제 4]
	//----------------------------------------------------------------------

	// 오름차순 정렬
	for (Player& player : players) {
		sort(player.getP(), player.getP() + player.getNum());
	}

	int count = count_if(players.begin(), players.end(), [](const Player& player) {
		vector<bool> found(26, false); 
		for (int i = 0; i < player.getNum(); ++i) {
			if (islower(player.getP()[i])) {
				found[player.getP()[i] - 'a'] = true;
			}
		}
		return all_of(found.begin(), found.end(), [](bool val) {
			return val; 
			});
		});
	cout << "[문제4] 'a'부터 'z'까지 모든 문자가 메모리에 있는 Player의 개수: " << count << "\n";
	cout << "-----------------------------------------------------------------" << '\n';

	//----------------------------------------------------------------------
	// [문제 5]
	//----------------------------------------------------------------------
	
	cout << "[문제5] id를 입력받아 존재하는 id라면 다음 내용을 한 번에 화면 출력" << '\n';

	//효율성? 위해 각각의 정보들을 담아두기
	static array<Player, 2'000'000>playersId;
	static array<Player, 2'000'000>playersName;
	static array<Player, 2'000'000>playersScore;

	copy(players.begin(), players.end(), playersId.begin());
	copy(players.begin(), players.end(), playersName.begin());
	copy(players.begin(), players.end(), playersScore.begin());

	sort(playersId.begin(), playersId.end(), [](Player& a, Player& b) {
		return a.getId() < b.getId();
		});
	sort(playersName.begin(), playersName.end(), [](Player& a, Player& b) {
		return a.getName() < b.getName();
		});
	sort(playersScore.begin(), playersScore.end(), [](Player& a, Player& b) {
		return a.getScore() < b.getScore();
		});


	while (true) {
		int ID;
		cout << "id를 입력해 주세요 : ";
		cin >> ID;
		cout << "============================해당 ID 포함 앞과 뒤 Player의 정보=====================================" << '\n';
		//-------------------------------------- <ID> ------------------------------------------------------
		auto infor = find_if(playersId.begin(), playersId.end(), [ID](const Player& player) {
			return player.getId() == ID;
			});

		if (infor != playersId.end()) {
			cout << "[ 앞 ]" << '\n';
			if (infor != playersId.begin()) {
				(infor - 1)->show();
			}
			cout << '\n';
			cout << "[ 해당 ID ]" << '\n';
			infor->show();
			cout << '\n';
			cout << "[ 뒤 ]" << '\n';
			if (infor != (playersId.end() - 1)) {
				(infor + 1)->show();
			}
			cout << '\n';
		}
		else {
			cout << "해당 id를 가진 Player가 존재하지 않습니다.\n";
		}


		cout << "============================해당 name 포함 앞과 뒤 Player의 정보=====================================" << '\n';
		//-------------------------------------- <name> ------------------------------------------------------
		infor = find_if(playersName.begin(), playersName.end(), [ID](const Player a) {
			return a.getId() == ID;
			});

		if (infor != playersName.end()) {
			cout << "[ 앞 ]" << '\n';
			if (infor != playersName.begin()) {
				(infor -1)->show();				}
			cout << '\n';
			cout << "[ 해당 name ]" << '\n';				
			infor->show();
			cout << '\n';
			cout << "[ 뒤 ]" << '\n';
			if (infor != playersName.end() - 1) {
				(infor + 1)->show();
			}
			cout << '\n';
		}
		else {
			cout << "해당 id를 가진 Player가 존재하지 않습니다.\n";
		}

		cout << "============================해당 score 포함 앞과 뒤 Player의 정보=====================================" << '\n';
		//-------------------------------------- <score> ------------------------------------------------------
		infor = find_if(playersScore.begin(), playersScore.end(), [ID](const Player a) {
			return a.getId() == ID;
			});

		if (infor != playersScore.end()) {
			cout << "[ 앞 ]" << '\n';
			if (infor != playersScore.begin()) {
				(infor - 1)->show();
			}
			cout << '\n';
			cout << "[ 해당 score ]" << '\n';
			infor->show();
			cout << '\n';
			cout << "[ 뒤 ]" << '\n';
			if (infor != playersScore.end() - 1) {
				(infor + 1)->show();
			}
			cout << '\n';
		}
		else {
			cout << "해당 id를 가진 Player가 존재하지 않습니다.\n";
		}
	}

}
